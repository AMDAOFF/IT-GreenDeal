@page "/Absence"

@using System.Collections.Generic;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using RabbitMQ.Client;
@using RabbitMQ.Client.Events;
@using System;
@using System.Text;
@using System.Threading.Tasks;
@using Absence.Service.StudentClassService;
@using Absence.Service.SubjectService;
@using Absence.Service.ScheduleService;
@using Absence.Service.ClassroomService;
@using Absence.Service.StudentService;
@using Absence.Service.AbsenceReportService;
@using System.Threading;
@inject IStudentClassService StudentClassService
@inject ISubjectService SubjectService
@inject IClassroomService ClassroomService
@inject IScheduleService ScheduleService
@inject IStudentService StudentService

<h1>Absence</h1>

@if (AbsentStudents.Count == 0)
{
    <p><em>Loading absent students...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Student</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in AbsentStudents)
            {
                <tr>
                    <td>@student.Name</td>
                </tr>
            }
        </tbody>
    </table>


}

@if (RegistratedStudents.Count == 0)
{
    <p><em>Waiting for Python script...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Student</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in RegistratedStudents)
            {
                <tr>
                    <td>@student.Name</td>
                </tr>
            }
        </tbody>
    </table>


}

<form>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <div class="input-group input-group-lg">
                    <div class="input-group-prepend">
                        <label class="input-group-text">Subject</label>
                    </div>
                    <select @bind="SelectedSubjectId" class="form-control">
                        @foreach (var subject in Subjects)
                        {
                            <option value="@subject.SubjectId">@subject.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <div class="input-group input-group-lg">
                    <div class="input-group-prepend">
                        <label class="input-group-text">Classroom</label>
                    </div>
                    <select @bind="SelectedClassroomId" class="form-control">
                        @foreach (var classroom in Classrooms)
                        {
                            <option value="@classroom.ClassroomId">@classroom.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <div class="input-group input-group-lg">
                    <button type="submit" class="form-control btn btn-success" @onclick="StartAbsenceRegistration">Start Registration</button>
                </div>
            </div>
        </div>
    </div>
</form>

@* //TODO: Button to start the script. *@
@* //TODO: Timer or button to end the script. *@
@* //TODO: Automatic Subject and Week / Day / Hour tracking *@

@code {
    public List<FullStudentDTO> AbsentStudents { get; set; }

    public List<FullStudentDTO> RegistratedStudents { get; set; }

    public List<FullSubjectDTO> Subjects { get; set; }

    public List<FullClassroomDTO> Classrooms { get; set; }

    public int SelectedSubjectId { get; set; }

    public int SelectedClassroomId { get; set; }



    public CancellationToken RabbitMQToken { get; set; }


    // TODO: Get the subject based on the date

    protected override async Task OnInitializedAsync()
    {
        //TODO: Fix error - StudentClass could be the problem
        Classrooms = await ClassroomService.GetAll();
        Subjects = await SubjectService.GetAll();


        AbsentStudents = new List<FullStudentDTO>();
        RegistratedStudents = new List<FullStudentDTO>();

    }

    private async Task StartAbsenceRegistration()
    {
        DateTime dateTime = DateTime.Now;
        FullScheduleDTO Schedule = await ScheduleService.GetSchedule(SelectedClassroomId, SelectedSubjectId, dateTime);

        AbsentStudents = Schedule.StudentClass.Students.ToList();

        string cameraIP = Schedule.Classroom.Camera.IP;

        CancellationTokenSource source = new CancellationTokenSource();
        RabbitMQToken = source.Token;

        Task rabbitMQTask = Task.Run(() => RunRabbitMQ(cameraIP));



    }

    private Task RunRabbitMQ(string cameraIP)
    {
        ConnectionFactory factory = new ConnectionFactory() { HostName = "localhost", UserName = "guest", Password = "guest", VirtualHost = "/" };


        using (IConnection connection = factory.CreateConnection())
        using (IModel channel = connection.CreateModel())
        {
            EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
            consumer.Received += ConsumerReceived;
            channel.BasicConsume(queue: $"Absence-{cameraIP}", autoAck: true, consumer: consumer);
            while (true)
            {
                if (RabbitMQToken.IsCancellationRequested)
                {
                    consumer.Received -= ConsumerReceived;
                    break;
                }
            }
        }
        return null;
    }

    private async void ConsumerReceived(object sender, BasicDeliverEventArgs ea)
    {

        byte[] body = ea.Body.ToArray();
        string studentId = Encoding.UTF8.GetString(body);

        FullStudentDTO student = await StudentService.GetById(studentId);
        RegistratedStudents.Add(student);
        if (AbsentStudents.Any(o => o.StudentId == student.StudentId))
        {
            AbsentStudents.Remove(student);
        }
        await InvokeAsync(StateHasChanged);
    }
}