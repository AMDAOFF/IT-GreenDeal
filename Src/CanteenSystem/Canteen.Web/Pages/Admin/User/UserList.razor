@page "/admin/user/userlist"
@inject IUserService _service
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigation

<div class="col-12">
	<h1>Bruger administration</h1>
</div>

@if (Users != null)
{
	// Table of users with their roles.
	<div class="container">
		<table class="table table-dark">
			<thead>
				<tr>
					<th scope="col">NAVN</th>
					<th scope="col">ROLLE</th>
					<th class="w-25">HANDLING</th>
				</tr>
			</thead>
			<tbody>
				@if (Users != null)
				{
					@foreach (var user in Users)
					{
						<tr>
							<td>@user.Name @user.Surname</td>
							<td>@user.Role</td>
							<td class="w-25">
								<button class="btn btn-danger" @onclick="@(() => DeleteUser(user))">Slet</button>
								<button class="btn btn-success" @onclick="@(() => LoadInfoModal(user.Id))" data-toggle="modal" data-target="#editUserModal">Edit</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
}
else
{
	// If the users havent been loaded yet.
	<label>Loading...</label>
}

@* Modal for editing of user *@
<div class="modal fade" id="editUserModal" tabindex="-1" role="dialog" aria-labelledby="userEditModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="userEditModalLabel">Redigere bruger</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<EditForm Model="UserDTO" OnValidSubmit="EditUser">
					<div class="form-group">
						<h3 class="form-text">Fornavn</h3>
						<InputText placeholder="Indtast fornavn" class="form-control" @bind-Value="@UserDTO.Name" />
					</div>
					<div class="form-group">
						<h3 class="form-text">Efternavn</h3>
						<InputText placeholder="Indtast efternavn" class="form-control" @bind-Value="@UserDTO.Surname" />
					</div>
					<div class="form-group">
						<h3 class="form-text">Email</h3>
						<InputText placeholder="Indtast email" class="form-control" @bind-Value="@UserDTO.Email" />
					</div>
					<div class="form-group">
						<h3 class="form-text">Roller</h3>
						@if (Roles != null)
						{
							<select class="custom-select" @bind="@UserDTO.Role">
								@foreach (var Role in Roles)
								{
									<option value="@Role">
										@Role
									</option>
								}
							</select>
						}
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Luk</button>
						<input type="submit" class="btn btn-primary" value="Gem" />
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>


@code {
	private List<SlimApplicationUserDTO> Users;
	private SlimApplicationUserDTO UserDTO { get; set; } = new SlimApplicationUserDTO();
	private List<string> Roles { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// Gets current logged ind user and checks if the user is admin.
		// If not, then the user will be redirected to the frontpage.
		try
		{
			var authState = await authStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;

			if (!user.IsInRole("Admin"))
			{
				navigation.NavigateTo("/");
			}
			if (Users == null)
			{
				Users = await _service.GetUsersAsync();
				Roles = (List<string>)await _service.GetRoles();
				StateHasChanged();
			}
		}
		catch (Exception)
		{
			navigation.NavigateTo("/");
		}
	}

	public void LoadInfoModal(string id)
	{
		UserDTO = Users.FirstOrDefault(x => x.Id == id);
	}

	public async Task EditUser()
	{
		await _service.EditUser(UserDTO);
	}

	private async Task DeleteUser(SlimApplicationUserDTO userDTO)
	{
		await _service.DeleteUser(userDTO);
		Users.Remove(userDTO);
		StateHasChanged();
	}
}
