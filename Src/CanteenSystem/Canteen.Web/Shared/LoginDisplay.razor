@using System.Security.Claims
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigation

@inject IUserService _userService
@inject NavigationManager Navigation
@*@inject TokenProvider TokenProvider*@

<AuthorizeView>
	<Authorized>
		@if (IdentityUser != null)
		{
			@if (claimUser.IsInRole("Admin"))
			{
				<a href="Admin/User/UserList">Admin</a>
			}
			@if (claimUser.IsInRole("Admin") || claimUser.IsInRole("Canteen"))
			{
				<a href="Worker/Dashboard">Kantine</a>
			}
			<a href="Identity/Account/Manage/Index">
				@IdentityUser?.Name @IdentityUser.Surname
			</a>
		}
		<form method="post" action="Identity/Account/LogOut">
			<button type="submit" class="nav-link btn btn-link">Log ud</button>
		</form>
	</Authorized>
	<NotAuthorized>
		<a href="Identity/Account/Register">Opret bruger</a>
		<a href="Identity/Account/Login">Log ind</a>
	</NotAuthorized>
</AuthorizeView>

@code {
	public SlimApplicationUserDTO IdentityUser { get; set; }

	private string returnUrl;
	private ClaimsPrincipal claimUser;

	public string ReturnUrl
	{
		get
		{
			return "~/" + Navigation.ToBaseRelativePath(Navigation.Uri);
		}
		set
		{
			returnUrl = value;
		}
	}

	private void UpdateUrl()
	{
		ReturnUrl = "~/" + Navigation.ToBaseRelativePath(Navigation.Uri);
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var authState = await authStateProvider.GetAuthenticationStateAsync();
			claimUser = authState.User;
		}
		catch (Exception)
		{

			throw;
		}
		IdentityUser = await _userService.GetUserAsync();
		StateHasChanged();
	}


}