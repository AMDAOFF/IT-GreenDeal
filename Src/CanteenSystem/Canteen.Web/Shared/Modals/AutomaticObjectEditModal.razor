@using Canteen.Web.Models;
@using Service.AttributeService;
@using System.Reflection;
@using System.Linq;
@using Service.AttributeService;
@using System.Reflection;
@using Canteen.Service.IngridentsService.Dto;

@code {
	[Parameter]
	public string ModalName { get; set; }

	[Parameter]
	public string ModalTitle { get; set; }

	[Parameter]
	public object ModalData { get; set; }

	[Parameter]
	public EventCallback<object> ModalActionButtonCallback { get; set; }

	private string ModalLabelName
	{
		get
		{
			return ModalName + "Label";
		}

		set
		{
			ModalLabelName = value;
		}
	}


	protected override async Task OnInitializedAsync()
	{

	}
}


<div class="modal fade" id="@ModalName" tabindex="-1" role="dialog" aria-labelledby="@ModalLabelName" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="@ModalLabelName">@(ModalTitle != "" ? ModalTitle : "Modal Title")</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form>
					@{
						if (ModalData != null)
						{
							foreach (var prop in ModalData.GetType().GetProperties())
							{
								object value = prop.GetValue(ModalData, null);
								var oType = prop.GetType();
								var name = prop.Name;

                                string fieldType = "";
                                bool hideField = false;
                                bool disableField = false;
                                string fieldName = string.Concat(name.Select(x => Char.IsUpper(x) ? " " + x : x.ToString())).TrimStart(' ');

								if (Attribute.IsDefined(prop, typeof(ModalFieldTypeAttribute)))
								{
									fieldType = prop.GetCustomAttribute<ModalFieldTypeAttribute>().FieldType;
								}

								if (Attribute.IsDefined(prop, typeof(ModalHideFieldAttribute)))
								{
									hideField = true;
								}

								if (Attribute.IsDefined(prop, typeof(ModalDisableFieldAttribute)))
								{
									disableField = true;
								}

								if (Attribute.IsDefined(prop, typeof(ModalFieldNameAttribute)))
								{
									fieldName = prop.GetCustomAttribute<ModalFieldNameAttribute>().FieldName;
								}



                                if (!hideField)
                                {
                                    <div class="form-group">
                                        <label>@fieldName</label>
                                        <input type="@fieldType" disabled="@disableField" value="@value" checked="@value" @onchange="@((ChangeEventArgs e) => prop.SetValue(ModalData, Convert.ChangeType(e.Value.ToString(), prop.PropertyType)))" class="form-control" />
                                    </div>
                                }


                                if (prop.PropertyType.Name == "List`1")
                                {

                                    IEnumerable<object> test = (IEnumerable<object>)Activator.CreateInstance(prop.PropertyType);

                                    test = (IEnumerable<object>)value;


                                    <table class="table table-dark">
                                        <thead>
                                            <tr>
                                                <th>Ret</th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            @if (test.Count() > 0)
                                            {
                                                @foreach (var item in test)
                                                {
                                                    @foreach (var obj in item.GetType().GetProperties())
                                                    {
                                                        object listValue = obj.GetValue(item, null);

                                                        test.Append(new { 
                                                            listValue
                                                        });

                                                        if (!Attribute.IsDefined(obj, typeof(ModalHideFieldAttribute)))
                                                        {
                                                            <tr>
                                                                <th>
                                                                    <div class="row d-flex">
                                                                        <div class="col-6 d-flex align-items-center">
                                                                            <h5>@listValue</h5>
                                                                        </div>

                                                                        <div class="col-6 d-flex justify-content-end">
                                                                            <div class="row">
                                                                                <div class="col-6 justify-content-end">
                                                                                    <button class="btn btn-primary btn-rounded btn-normal-text">
                                                                                        <i class="las la-trash"></i>
                                                                                    </button>
                                                                                </div>

                                                                                <div class="col-6">
                                                                                    <button class="btn btn-primary btn-rounded btn-normal-text" data-toggle="modal" data-target="#modalUpdateDish">
                                                                                        <i class="las la-edit"></i>
                                                                                    </button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </th>
                                                            </tr>
                                                        }


                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <th>
                                                        <div class="row d-flex">
                                                            <div class="col-9 text-center">
                                                                <select class="form-control">
                                                                    <option>WELCOME</option>
                                                                </select>
                                                            </div>

                                                            <div class="col-3">
                                                                <button type="button" class="btn btn-primary" @onclick="@(() => { prop.SetValue(prop.PropertyType, test); StateHasChanged(); })">Tilføj</button>
                                                            </div>
                                                        </div>
                                                    </th>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }

							}
						}
					}
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

				@if (ModalActionButtonCallback.HasDelegate)
				{
					<button type="button" class="btn btn-primary" @onclick="@(() => { ModalActionButtonCallback.InvokeAsync(ModalData); })" data-dismiss="modal">Save changes</button>
				}
			</div>
		</div>
	</div>
</div>