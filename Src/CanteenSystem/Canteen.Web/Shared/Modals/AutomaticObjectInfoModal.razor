@using Service.AttributeService;
@using System.Reflection;  

@code {
    [Parameter]
    public string ModalName { get; set; }

    [Parameter]
    public string ModalTitle { get; set; }

    [Parameter]
    public object ModalData { get; set; }

    [Parameter]
    public Action ModalActionButtonCallback { get; set; }

    [Parameter]
    public List<object> ModalSelectOptions { get; set; }

    private string ModalLabelName
    {
        get
        {
            return ModalName + "Label";
        }

        set
        {
            ModalLabelName = value;
        }
    }


    protected override async Task OnInitializedAsync()
    {

    }
    }

    <div class="modal fade" id="@ModalName" tabindex="-1" role="dialog" aria-labelledby="@ModalLabelName" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="@ModalLabelName">@ModalTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">

                        @{
                            if (ModalData != null)
                            {
                                foreach (var prop in ModalData.GetType().GetProperties())
                                {
                                    object value = prop.GetValue(ModalData, null);
                                    var name = prop.Name;
                                    string fieldName = string.Concat(name.Select(x => Char.IsUpper(x) ? " " + x : x.ToString())).TrimStart(' ');

                                    if (Attribute.IsDefined(prop, typeof(ModalFieldNameAttribute)))
                                    {
                                        fieldName = prop.GetCustomAttribute<ModalFieldNameAttribute>().FieldName;
                                    }

                                    if (!Attribute.IsDefined(prop, typeof(ModalHideFieldAttribute)))
                                    {

                                        if (prop.PropertyType.Name == "Boolean")
                                        {
                                            value = Convert.ToBoolean(value) ? "Ja" : "Nej";
                                        }

                                        <div class="col-6">
                                            <h5>@fieldName:<span class="modalInfoVariableValue">@value</span></h5>
                                        </div>
                                    }


                                }
                            }
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                    @if (ModalActionButtonCallback != null)
                    {
                        <button type="button" class="btn btn-primary" @onclick="@ModalActionButtonCallback">Save changes</button>
                    }

                </div>
            </div>
        </div>
    </div>

