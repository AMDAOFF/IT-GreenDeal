// <auto-generated />
using System;
using Canteen.DataAccess.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20211007224733_dbSeeding")]
    partial class dbSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Canteen.DataAccess.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllergyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("AllergyId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            AllergyId = 1,
                            AllergyName = "Gluten Allergi"
                        },
                        new
                        {
                            AllergyId = 2,
                            AllergyName = "Grøntsag"
                        },
                        new
                        {
                            AllergyId = 3,
                            AllergyName = "Skaldyr"
                        },
                        new
                        {
                            AllergyId = 4,
                            AllergyName = "Laktose"
                        },
                        new
                        {
                            AllergyId = 5,
                            AllergyName = "Nødder"
                        });
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DishCO2")
                        .HasColumnType("int");

                    b.Property<string>("DishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DishOfTheDay")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            DishCO2 = 500,
                            DishName = "Tomatsuppe",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 2,
                            DishCO2 = 650,
                            DishName = "Frikardeller",
                            DishOfTheDay = true
                        },
                        new
                        {
                            DishId = 3,
                            DishCO2 = 445,
                            DishName = "Græsk Farsbrød",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 4,
                            DishCO2 = 700,
                            DishName = "Hakkebøf Med Løg",
                            DishOfTheDay = true
                        },
                        new
                        {
                            DishId = 5,
                            DishCO2 = 250,
                            DishName = "Smørrebrød",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 6,
                            DishCO2 = 800,
                            DishName = "Pasta Kødsovs",
                            DishOfTheDay = true
                        },
                        new
                        {
                            DishId = 7,
                            DishCO2 = 650,
                            DishName = "Boller I Karry",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 8,
                            DishCO2 = 520,
                            DishName = "Koteletter I Fad",
                            DishOfTheDay = true
                        },
                        new
                        {
                            DishId = 9,
                            DishCO2 = 580,
                            DishName = "Gule Ærter",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 10,
                            DishCO2 = 150,
                            DishName = "Svensk Pølseret",
                            DishOfTheDay = true
                        },
                        new
                        {
                            DishId = 11,
                            DishCO2 = 100,
                            DishName = "Æggekage",
                            DishOfTheDay = false
                        },
                        new
                        {
                            DishId = 12,
                            DishCO2 = 403,
                            DishName = "Fiskefrikardeller",
                            DishOfTheDay = false
                        });
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.HasIndex("DishId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            IngredientName = "Fladfisk"
                        },
                        new
                        {
                            IngredientId = 2,
                            IngredientName = "Tomatsovs"
                        },
                        new
                        {
                            IngredientId = 3,
                            IngredientName = "Løg"
                        },
                        new
                        {
                            IngredientId = 4,
                            IngredientName = "Æg"
                        },
                        new
                        {
                            IngredientId = 5,
                            IngredientName = "Oksefars"
                        },
                        new
                        {
                            IngredientId = 6,
                            IngredientName = "Pasta"
                        },
                        new
                        {
                            IngredientId = 7,
                            IngredientName = "Korteletter (svin)"
                        },
                        new
                        {
                            IngredientId = 8,
                            IngredientName = "Fetaost"
                        },
                        new
                        {
                            IngredientId = 9,
                            IngredientName = "Kødboller"
                        },
                        new
                        {
                            IngredientId = 10,
                            IngredientName = "Salt"
                        },
                        new
                        {
                            IngredientId = 11,
                            IngredientName = "Pebber"
                        },
                        new
                        {
                            IngredientId = 12,
                            IngredientName = "Bacon"
                        },
                        new
                        {
                            IngredientId = 13,
                            IngredientName = "Kartofler"
                        },
                        new
                        {
                            IngredientId = 14,
                            IngredientName = "Oksebullion"
                        });
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.UserAllergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AllergyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAllergies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Canteen.DataAccess.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Allergy", b =>
                {
                    b.HasOne("Canteen.DataAccess.Models.Ingredient", "Ingredient")
                        .WithMany("Allergies")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Ingredient", b =>
                {
                    b.HasOne("Canteen.DataAccess.Models.Dish", "Dish")
                        .WithMany("Ingredients")
                        .HasForeignKey("DishId");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.UserAllergy", b =>
                {
                    b.HasOne("Canteen.DataAccess.Models.Allergy", "Allergy")
                        .WithMany("UserAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Canteen.DataAccess.Identity.ApplicationUser", "User")
                        .WithMany("UserAllergies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Allergy", b =>
                {
                    b.Navigation("UserAllergies");
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Dish", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Canteen.DataAccess.Models.Ingredient", b =>
                {
                    b.Navigation("Allergies");
                });

            modelBuilder.Entity("Canteen.DataAccess.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserAllergies");
                });
#pragma warning restore 612, 618
        }
    }
}
